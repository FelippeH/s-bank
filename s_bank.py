import json
import os

# Caminho do arquivo JSON onde os dados dos usu√°rios ser√£o armazenados
CAMINHO_ARQUIVO = "usuarios.json"

# Vari√°veis globais de controle e configura√ß√£o
usuarios = {}  # Dicion√°rio para armazenar usu√°rios na mem√≥ria (n√£o usado neste trecho)
contas = []    # Lista para armazenar contas (n√£o usada neste trecho)
AGENCIA = "0001"  # N√∫mero fixo da ag√™ncia
conta_logada = None  # Vari√°vel para guardar o usu√°rio logado no momento
LIMITE_SAQUE_VALOR = 1000  # Limite m√°ximo permitido por saque

# Fun√ß√£o para carregar a lista de usu√°rios do arquivo JSON
def carregar_usuarios():
    # Caso o arquivo n√£o exista, cria um arquivo vazio com lista vazia
    if not os.path.exists(CAMINHO_ARQUIVO):
        with open(CAMINHO_ARQUIVO, "w", encoding="utf-8") as f:
            json.dump([], f)

    # L√™ e retorna a lista de usu√°rios armazenada no arquivo JSON
    with open(CAMINHO_ARQUIVO, "r", encoding="utf-8") as f:
        return json.load(f)

# Fun√ß√£o para salvar a lista atualizada de usu√°rios no arquivo JSON
def salvar_usuarios(usuarios):
    # Salva os dados com indenta√ß√£o para facilitar leitura manual
    with open(CAMINHO_ARQUIVO, "w", encoding="utf-8") as f:
        json.dump(usuarios, f, indent=4, ensure_ascii=False)

# Atualiza os dados de um usu√°rio espec√≠fico na lista armazenada
def atualizar_usuario_atualizado(usuario_atualizado):
    lista_usuarios = carregar_usuarios()

    # Percorre a lista para encontrar o usu√°rio pelo CPF e substitu√≠-lo
    for i, u in enumerate(lista_usuarios):
        if u["cpf"] == usuario_atualizado["cpf"]:
            lista_usuarios[i] = usuario_atualizado
            break

    # Salva a lista atualizada no arquivo JSON
    salvar_usuarios(lista_usuarios)

# Fun√ß√£o para criar uma nova conta de usu√°rio
def criar_conta():
    print("\n~~ Criar conta ~~")

    # Solicita dados pessoais e endere√ßo para cadastro
    cpf = input("Digite seu CPF (Apenas n√∫meros. Sem pontos ou tra√ßos): ")
    nome_pessoa = input("Digite seu nome: ")
    logradouro = input("Digite o nome da rua: ")
    num_casa = input("Digite o n√∫mero da casa: ")
    cep = input("Digite o CEP (Apenas n√∫meros. Sem pontos ou tra√ßos): ")
    uf = input("Digite o UF: ")

    # Solicita cria√ß√£o de senha simples para autentica√ß√£o
    print("\n~~ Agora crie uma senha ~~")
    senha = input("Crie uma senha com 4 caracteres (Apenas n√∫meros s√£o permitidos): ")

    # Monta o dicion√°rio do novo usu√°rio com dados e saldo inicial zerado
    novo_usuario = {
        "cpf": cpf,
        "nome_pessoa": nome_pessoa,
        "endereco": {
            "logradouro": logradouro,
            "num_casa": num_casa,
            "cep": cep,
            "uf": uf
        },
        "senha": senha,
        "saldo": 0.0,
        "extrato": []
    }

    lista_usuarios = carregar_usuarios()

    # Verifica se o CPF j√° existe para evitar duplicidade de cadastro
    if any(usuario["cpf"] == cpf for usuario in lista_usuarios):
        print("‚ö†Ô∏è CPF j√° cadastrado!")
        return

    # Adiciona novo usu√°rio √† lista e salva no arquivo
    lista_usuarios.append(novo_usuario)
    salvar_usuarios(lista_usuarios)
    print("‚úÖ Conta criada com sucesso!")

# Fun√ß√£o para autenticar o usu√°rio pelo CPF e senha
def acessar_conta():
    print(f"""
    ~~ Por favor, entre com o seu CPF e senha ~~
          """)
    cpf = input("Digite seu CPF (Apenas n√∫meros. Sem pontos ou tra√ßos): ")
    senha = input("Digite sua senha: ")

    usuarios = carregar_usuarios()

    # Busca o usu√°rio que tenha CPF e senha correspondentes
    for usuario in usuarios:
        if usuario["cpf"] == cpf and usuario["senha"] == senha:
            print(f"\n‚úÖ Login bem-sucedido! Bem-vindo, {usuario['nome_pessoa']}.")
            return usuario

    # Se n√£o encontrar, retorna None para sinalizar falha
    print("‚ùå CPF ou senha incorretos.")
    return None

usuario_logado = None

# Loop principal que exibe menus conforme o estado do login
while True:
    if not usuario_logado:
        # Menu inicial para login, cadastro ou sair
        menu = """
    ~~ Seja Bem-vindo ao S-Bank ~~
    [1] Acessar conta
    [2] Criar conta
    [0] Sair
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    => """
        opcao = input(menu)

        if opcao == "1":
            usuario_logado = acessar_conta()

        elif opcao == "2":
            criar_conta()

        elif opcao == "0":
            print("\nEncerrando o sistema...")
            break

        else:
            print("‚ùå Op√ß√£o inv√°lida.")
    
    else:
        # Menu exibido para usu√°rio j√° logado
        menu_logado = f"""
    ~~ Ol√° {usuario_logado['nome_pessoa']}! Selecione uma op√ß√£o: ~~
    Saldo atual: R$ {usuario_logado['saldo']:.2f}
    [1] Dep√≥sito
    [2] Saque
    [3] Extrato
    [0] Voltar
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    => """
    
        opcao_logado = input(menu_logado)

# OP√á√ÉO DEP√ìSITO #
        if opcao_logado == "1":
            valor = float(input("Valor do dep√≥sito: R$ "))
            if valor <= 0:
                print("‚ùå Valor inv√°lido.")
            else:
                # Atualiza saldo e adiciona registro no extrato
                usuario_logado["saldo"] += valor
                usuario_logado["extrato"].append(f"Dep√≥sito: +R$ {valor:.2f}")
                atualizar_usuario_atualizado(usuario_logado)
                print(f"‚úÖ Dep√≥sito de R$ {valor:.2f} realizado.")

# OP√á√ÉO SAQUE #
        elif opcao_logado == "2":
            valor = float(input("Valor do saque: R$ "))
            if valor <= 0:
                print("‚ùå Valor inv√°lido.")
            elif valor > usuario_logado["saldo"]:
                print("‚ùå Saldo insuficiente.")
            elif valor > LIMITE_SAQUE_VALOR:
                print(f"‚ùå O valor m√°ximo por saque √© de R${LIMITE_SAQUE_VALOR:.2f}.")
                print(f"Saques acima desse valor, favor, dirigir √† ag√™ncia.")
            else:
                # Subtrai valor do saldo e registra no extrato
                usuario_logado["saldo"] -= valor
                usuario_logado["extrato"].append(f"Saque: -R$ {valor:.2f}")
                atualizar_usuario_atualizado(usuario_logado)
                print(f"‚úÖ Saque de R$ {valor:.2f} realizado.")

# OP√á√ÉO EXTRATO #
        elif opcao_logado == "3":
            print("\nüìú Extrato:")
            if not usuario_logado["extrato"]:
                print("Nenhuma movimenta√ß√£o.")
            else:
                for item in usuario_logado["extrato"]:
                    print(item)
            print(f"Saldo atual: R$ {usuario_logado['saldo']:.2f}")

# OP√á√ÉO DESLOGAR #
        elif opcao_logado == "0":
            print(f"\nDeslogando {usuario_logado['nome_pessoa']}...")
            usuario_logado = None

        else:
            print("‚ùå Op√ß√£o inv√°lida.")
